name: Manually trigger Build and Publish
run-name: Build for ${{ inputs.platforms }} and publish to ${{ inputs.registry }}

on:
  # note: workflow_dispatch requires this workflow file to be on the default branch
  workflow_dispatch:
    inputs:
      registry:
        description: 'Target registry'
        type: choice
        options:
          - GitHub Container Registry
          - Docker Hub
        default: GitHub Container Registry
      platforms:
        description: 'Target platforms in JSON list syntax'
        default: '[ "linux/amd64", "linux/arm/v6", "linux/arm/v7", "linux/arm64", "linux/i386" ]'
      alpine-version:
        description: 'Version of Alpine Linux base image'
        default: latest
      exprtk-url:
        description: 'URL to exprtk header file'
        default: 'https://github.com/ArashPartow/exprtk/raw/master/exprtk.hpp'
      test-skip:
        description: 'Skip tests?'
        type: boolean
        default: false
      test-allow-failure:
        description: 'Continue build if tests fail?'
        type: boolean
        default: false
      test-timeout:
        description: 'Timeout for tests (in ms)'
        type: number
        default: 400
      test-loglevel:
        description: 'Log level for tests (1-5, higher is more verbose)'
        type: choice
        options: [ 1, 2, 3, 4, 5 ]
        default: 3

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      build-args:
#    outputs:
#      build-args: |
#        ${{ format(
#          '[ "ALPINE_VERSION={0}", "EXPRTK_URL={1}", "MQM_TEST_SKIP={2}", "MQM_TEST_ALLOW_FAILURE={3}", "MQM_TEST_DEFAULT_WAIT_MS={4}", "MQM_TEST_LOGLEVEL={5}" ]',
#          inputs.alpine-version,
#          inputs.exprtk-url,
#          inputs.test-skip,
#          inputs.test-allow-failure,
#          inputs.test-timeout,
#          inputs.test-loglevel
#        ) }}
#    env:
#      INPUT_ALPINE_VERSION: ${{ inputs.alpine-version }}
#      INPUT_EXPRTK_URL: ${{ inputs.exprtk-url }}
#      INPUT_MQM_TEST_SKIP: ${{ inputs.test-skip }}
#      INPUT_MQM_TEST_ALLOW_FAILURE: ${{ inputs.test-allow-failure }}
#      INPUT_MQM_TEST_DEFAULT_WAIT_MS: ${{ inputs.test-timeout }}
#      INPUT_MQM_TEST_LOGLEVEL: ${{ inputs.test-loglevel }}
    steps:
#      - run: true
#      - run: { printf build-args= && printenv | sort | sed -nE "s/^INPUT_(.+)$/\1/p"; }  >>"${GITHUB_OUTPUT}"
#      - run: printenv | sed -nE "s/^INPUT_(.+)$/\1/p" | xargs -0 printf build-args=%q >>"${GITHUB_OUTPUT}"
      - run: |
          {
            echo 'build-args<<EOF'
            printenv | sed -nE 's/^INPUT_(.+)$/\1/p'
            echo EOF
          } >> "${GITHUB_OUTPUT}"
      - run: cat "${GITHUB_OUTPUT}"

  build-multi-platform-to-ghcr:
    if: false && inputs.registry == 'GitHub Container Registry'
    permissions:
      packages: write
    uses: ./.github/workflows/build-ghcr.yml
    needs: prepare
    with:
      platforms:      ${{ inputs.platforms }}
      build-args:     ${{ needs.prepare.outputs.build-args }}

  build-multi-platform-to-dockerhub:
    if: false && inputs.registry == 'Docker Hub'
    uses: ./.github/workflows/build-dockerhub.yml
    needs: prepare
    with:
      platforms:      ${{ inputs.platforms }}
      build-args:     ${{ needs.prepare.outputs.build-args }}

  print-build-args:
    runs-on: ubuntu-latest
    needs: prepare
    env:
      INPUT_BUILD_ARGS: ${{ needs.prepare.outputs.build-args }}
    steps:
     - run: printenv
