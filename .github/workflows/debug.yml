name: Debug

on:
  # note: workflow_dispatch requires this workflow file to be on the default branch
  workflow_dispatch:
    inputs:
      alpine-version:
        description: 'Version of Alpine Linux base image'
        default: latest
      exprtk-url:
        description: 'URL to exprtk header file'
        default: 'https://github.com/ArashPartow/exprtk/raw/master/exprtk.hpp'
      test-skip:
        description: 'Skip tests?'
        type: boolean
        default: false
      test-allow-failure:
        description: 'Continue build if tests fail?'
        type: boolean
        default: false
      test-timeout:
        description: 'Timeout for tests (in ms)'
        type: number
        default: 400
      test-loglevel:
        description: 'Log level for tests (1-5, higher is more verbose)'
        type: choice
        options: [ 1, 2, 3, 4, 5 ]
        default: 3

jobs:
  job-a1:
    runs-on: ubuntu-latest
    outputs:
      jobresult: ${{ steps.step1.outputs.result }}
    env:
      BUILD_ARG_ALPINE_VERSION: ${{ inputs.alpine-version }}
      BUILD_ARG_EXPRTK_URL: ${{ inputs.exprtk-url }}
      BUILD_ARG_MQM_TEST_SKIP: ${{ inputs.test-skip }}
      BUILD_ARG_MQM_TEST_ALLOW_FAILURE: ${{ inputs.test-allow-failure }}
      BUILD_ARG_MQM_TEST_DEFAULT_WAIT_MS: ${{ inputs.test-timeout }}
      BUILD_ARG_MQM_TEST_LOGLEVEL: ${{ inputs.test-loglevel }}
    steps:
      - id: step1
        run: |
          {
          printf result=
          printf '['
          sep=''
          printenv | sed -nE 's/^BUILD_ARG_(.+)$/\1/p' | while read -r arg; do
            printf '%s"%s"' "${sep}" "${arg}"
            sep=", "
          done
          printf ']'
          } >>"${GITHUB_OUTPUT}"

  job-a2:
    runs-on: ubuntu-latest
    needs: job-a1
    env:
      INPUT_RESULT: ${{ needs.job-a1.outputs.jobresult }}
    outputs:
      build-args-multiline: ${{ join(fromJSON(needs.job-a1.outputs.jobresult), fromJSON('"\n"')) }}
    steps:
     - run: printenv
     - run: echo "${INPUT_RESULT}"

  job-a3:
    runs-on: ubuntu-latest
    needs: job-a2
    env:
      MULTILINE: ${{ needs.job-a2.outputs.build-args-multiline }}
    steps:
     - run: echo "${MULTILINE}"
