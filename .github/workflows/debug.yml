name: Debug

on:
  # note: workflow_dispatch requires this workflow file to be on the default branch
  workflow_dispatch:
    inputs:
      alpine-version:
        description: 'Version of Alpine Linux base image'
        default: latest
      exprtk-url:
        description: 'URL to exprtk header file'
        default: 'https://github.com/ArashPartow/exprtk/raw/master/exprtk.hpp'
      test-skip:
        description: 'Skip tests?'
        type: boolean
        default: false
      test-allow-failure:
        description: 'Continue build if tests fail?'
        type: boolean
        default: false
      test-timeout:
        description: 'Timeout for tests (in ms)'
        type: number
        default: 400
      test-loglevel:
        description: 'Log level for tests (1-5, higher is more verbose)'
        type: choice
        options: [ 1, 2, 3, 4, 5 ]
        default: 3

jobs:
  job-a1:
    runs-on: ubuntu-latest
    outputs:
      jobresult: ${{ steps.step1.outputs.result }}
    env:
      BUILD_ARG_ALPINE_VERSION: ${{ inputs.alpine-version }}
      BUILD_ARG_EXPRTK_URL: ${{ inputs.exprtk-url }}
      BUILD_ARG_MQM_TEST_SKIP: ${{ inputs.test-skip }}
      BUILD_ARG_MQM_TEST_ALLOW_FAILURE: ${{ inputs.test-allow-failure }}
      BUILD_ARG_MQM_TEST_DEFAULT_WAIT_MS: ${{ inputs.test-timeout }}
      BUILD_ARG_MQM_TEST_LOGLEVEL: ${{ inputs.test-loglevel }}
    steps:
      - id: step1
        run: |
          {
            echo 'result<<EOF'
            printenv | sed -nE 's/^BUILD_ARG_(.+)$/\1/p'
            echo EOF
          } >> "${GITHUB_OUTPUT}"

  job-a2:
    runs-on: ubuntu-latest
    needs: job-a1
    env:
      INPUT_RESULT: ${{ needs.job-a1.outputs.jobresult }}
    steps:
     - run: printenv
     - run: echo "${INPUT_RESULT}"

  job-b1:
    runs-on: ubuntu-latest
    outputs:
      jobresult: ${{ steps.step1.outputs.result }}
    steps:
      - id: step1
        run: |
          {
            echo 'result<<EOF'
            printenv | sed -nE 's/^INPUT_(.+)$/\1/p'
            echo EOF
          } >> "${GITHUB_OUTPUT}"

  job-b2:
    runs-on: ubuntu-latest
    needs: job-b1
    env:
      INPUT_RESULT: ${{ needs.job-b1.outputs.jobresult }}
    steps:
     - run: printenv
     - run: echo "${INPUT_RESULT}"

  job3:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      output1: ${{ steps.step1.outputs.test }}
      output2: ${{ steps.step2.outputs.test }}
    steps:
      - id: step1
        run: echo "test=hello" >> "$GITHUB_OUTPUT"
      - id: step2
        run: echo "test=world" >> "$GITHUB_OUTPUT"
  job4:
    runs-on: ubuntu-latest
    needs: job3
    steps:
      - env:
          OUTPUT1: ${{needs.job1.outputs.output1}}
          OUTPUT2: ${{needs.job1.outputs.output2}}
        run: echo "$OUTPUT1 $OUTPUT2"
