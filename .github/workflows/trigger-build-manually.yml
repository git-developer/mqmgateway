name: Manually trigger Build and Publish
run-name: Build for ${{ inputs.platforms }} and publish to ${{ inputs.registry }}

on:
  # note: workflow_dispatch requires this workflow file to be on the default branch
  workflow_dispatch:
    inputs:
      registry:
        description: 'Target registry'
        type: choice
        options:
          - GitHub Container Registry
          - Docker Hub
        default: GitHub Container Registry
      platforms:
        description: 'Target platforms in JSON list syntax'
        default: '[ "linux/amd64", "linux/arm/v6", "linux/arm/v7", "linux/arm64", "linux/i386" ]'
      alpine-version:
        description: 'Version of Alpine Linux base image'
        default: latest
      exprtk-url:
        description: 'URL to exprtk header file'
        default: 'https://github.com/ArashPartow/exprtk/raw/master/exprtk.hpp'
      test-skip:
        description: 'Skip tests?'
        type: boolean
        default: false
      test-allow-failure:
        description: 'Continue build if tests fail?'
        type: boolean
        default: false
      test-timeout:
        description: 'Timeout for tests (in ms)'
        type: number
        default: 400
      test-loglevel:
        description: 'Log level for tests (1-5, higher is more verbose)'
        type: choice
        options: [ 1, 2, 3, 4, 5 ]
        default: 3

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      build-args: ${{ steps.collect-build-args.outputs.result }}
      build-args-json: ${{ steps.collect-build-args-json.outputs.result }}
    env:
      BUILD_ARG_ALPINE_VERSION: ${{ inputs.alpine-version }}
      BUILD_ARG_EXPRTK_URL: ${{ inputs.exprtk-url }}
      BUILD_ARG_MQM_TEST_SKIP: ${{ inputs.test-skip }}
      BUILD_ARG_MQM_TEST_ALLOW_FAILURE: ${{ inputs.test-allow-failure }}
      BUILD_ARG_MQM_TEST_DEFAULT_WAIT_MS: ${{ inputs.test-timeout }}
      BUILD_ARG_MQM_TEST_LOGLEVEL: ${{ inputs.test-loglevel }}
    steps:
      - id: collect-build-args
        run: |
          {
            echo 'result<<EOF'
            printenv | sed -nE 's/^BUILD_ARG_(.+)$/\1/p'
            echo EOF
          } >> "${GITHUB_OUTPUT}"
      - id: collect-build-args-json
        run: |
          {
          printf result=
          printf '['
          sep=''
          printenv | sed -nE 's/^BUILD_ARG_(.+)$/\1/p' | while read -r arg; do
            printf '%s"%s"' "${sep}" "${arg}"
            sep=", "
          done
          printf ']'
          } >>"${GITHUB_OUTPUT}"

  build-multi-platform-to-ghcr:
    if: inputs.registry == 'GitHub Container Registry'
    permissions:
      packages: write
    uses: ./.github/workflows/build-ghcr.yml
    needs: prepare
    with:
      platforms:      ${{ inputs.platforms }}
      build-args:     ${{ needs.prepare.outputs.build-args }}
      build-args-json:     ${{ needs.prepare.outputs.build-arg-jsons }}

  build-multi-platform-to-dockerhub:
    if: inputs.registry == 'Docker Hub'
    uses: ./.github/workflows/build-dockerhub.yml
    needs: prepare
    with:
      platforms:      ${{ inputs.platforms }}
      build-args:     ${{ needs.prepare.outputs.build-args }}
      build-args-json:     ${{ needs.prepare.outputs.build-arg-jsons }}
